<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		                http://www.springframework.org/schema/beans/spring-beans.xsd
		                http://www.springframework.org/schema/context
		                http://www.springframework.org/schema/context/spring-context.xsd
		                http://www.springframework.org/schema/mvc
		                http://www.springframework.org/schema/mvc/spring-mvc.xsd
		                http://www.springframework.org/schema/tx 
		    			http://www.springframework.org/schema/tx/spring-tx.xsd
		    			http://www.springframework.org/schema/security 
		    			http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="org.springframework.data.web.PageableArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<!-- Creates the springSecurityFilterChain with the customer filter customRestFilter 
		injected. -->
	<security:http create-session="stateless"
		entry-point-ref="authenticationEntryPoint" authentication-manager-ref="authenticationManager">
		<security:custom-filter ref="customRestFilter"
			position="BASIC_AUTH_FILTER" />
		<security:intercept-url pattern="/**" access="ROLE_USER" />
	</security:http>

	<!-- The authenticationEntryPoint allows us to customise to start the authentication 
		process (i.e. bring up the dialog box when no header is present) The realmName 
		will be displayed in the dialog box, hence not wise to put the username and 
		password in it. -->
	<bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="Username: jack Password: jill" />
	</bean>

	<!-- Our user Basic Authentication Filter. This can be replaced with what 
		ever authentication process you wish -->
	<bean id="customRestFilter" class="com.droidshop.api.security.RestSecurityFilter">
		<constructor-arg name="authenticationManager" ref="authenticationManager" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="restAuthenticationProvider" />
	</security:authentication-manager>

	<!-- The restAuthenticationProvider is the class responsible for verifying 
		that the username and password are valid and returning an AuthenticationToken 
		matching the user requesting the resource and the user's access level. This 
		is the place where you would normally hook into a more complex authentication 
		system and user data layer. -->
	<bean id="restAuthenticationProvider" class="com.droidshop.api.security.RestAuthenticationProvider" />

</beans>